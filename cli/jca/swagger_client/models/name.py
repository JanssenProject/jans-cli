# coding: utf-8

"""
    jans-config-api

    jans-config-api - Authorization services  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: xxx@gluu.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Name(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'family_name': 'str',
        'given_name': 'str',
        'middle_name': 'str',
        'honorific_prefix': 'str',
        'honorific_suffix': 'str',
        'formatted': 'str'
    }

    attribute_map = {
        'family_name': 'familyName',
        'given_name': 'givenName',
        'middle_name': 'middleName',
        'honorific_prefix': 'honorificPrefix',
        'honorific_suffix': 'honorificSuffix',
        'formatted': 'formatted'
    }

    def __init__(self, family_name=None, given_name=None, middle_name=None, honorific_prefix=None, honorific_suffix=None, formatted=None):  # noqa: E501
        """Name - a model defined in Swagger"""  # noqa: E501
        self._family_name = None
        self._given_name = None
        self._middle_name = None
        self._honorific_prefix = None
        self._honorific_suffix = None
        self._formatted = None
        self.discriminator = None
        if family_name is not None:
            self.family_name = family_name
        if given_name is not None:
            self.given_name = given_name
        if middle_name is not None:
            self.middle_name = middle_name
        if honorific_prefix is not None:
            self.honorific_prefix = honorific_prefix
        if honorific_suffix is not None:
            self.honorific_suffix = honorific_suffix
        if formatted is not None:
            self.formatted = formatted

    @property
    def family_name(self):
        """Gets the family_name of this Name.  # noqa: E501


        :return: The family_name of this Name.  # noqa: E501
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this Name.


        :param family_name: The family_name of this Name.  # noqa: E501
        :type: str
        """

        self._family_name = family_name

    @property
    def given_name(self):
        """Gets the given_name of this Name.  # noqa: E501


        :return: The given_name of this Name.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this Name.


        :param given_name: The given_name of this Name.  # noqa: E501
        :type: str
        """

        self._given_name = given_name

    @property
    def middle_name(self):
        """Gets the middle_name of this Name.  # noqa: E501


        :return: The middle_name of this Name.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this Name.


        :param middle_name: The middle_name of this Name.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def honorific_prefix(self):
        """Gets the honorific_prefix of this Name.  # noqa: E501

        A \"title\" like \"Ms.\", \"Mrs.\"  # noqa: E501

        :return: The honorific_prefix of this Name.  # noqa: E501
        :rtype: str
        """
        return self._honorific_prefix

    @honorific_prefix.setter
    def honorific_prefix(self, honorific_prefix):
        """Sets the honorific_prefix of this Name.

        A \"title\" like \"Ms.\", \"Mrs.\"  # noqa: E501

        :param honorific_prefix: The honorific_prefix of this Name.  # noqa: E501
        :type: str
        """

        self._honorific_prefix = honorific_prefix

    @property
    def honorific_suffix(self):
        """Gets the honorific_suffix of this Name.  # noqa: E501

        Name suffix, like \"Junior\", \"The great\", \"III\"  # noqa: E501

        :return: The honorific_suffix of this Name.  # noqa: E501
        :rtype: str
        """
        return self._honorific_suffix

    @honorific_suffix.setter
    def honorific_suffix(self, honorific_suffix):
        """Sets the honorific_suffix of this Name.

        Name suffix, like \"Junior\", \"The great\", \"III\"  # noqa: E501

        :param honorific_suffix: The honorific_suffix of this Name.  # noqa: E501
        :type: str
        """

        self._honorific_suffix = honorific_suffix

    @property
    def formatted(self):
        """Gets the formatted of this Name.  # noqa: E501

        Full name, including all middle names, titles, and suffixes as appropriate  # noqa: E501

        :return: The formatted of this Name.  # noqa: E501
        :rtype: str
        """
        return self._formatted

    @formatted.setter
    def formatted(self, formatted):
        """Sets the formatted of this Name.

        Full name, including all middle names, titles, and suffixes as appropriate  # noqa: E501

        :param formatted: The formatted of this Name.  # noqa: E501
        :type: str
        """

        self._formatted = formatted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Name, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Name):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
